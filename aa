{"cells":[{"cell_type":"markdown","source":["## Read Data"],"metadata":{}},{"cell_type":"code","source":["# Load data from a CSV\nfile_location = \"/FileStore/tables/game_skater_stats.csv\"\ndf = spark.read.format(\"CSV\").option(\"inferSchema\", True).option(\"header\", True).load(file_location)\ndisplay(df.take(5))"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>game_id</th><th>player_id</th><th>team_id</th><th>timeOnIce</th><th>assists</th><th>goals</th><th>shots</th><th>hits</th><th>powerPlayGoals</th><th>powerPlayAssists</th><th>penaltyMinutes</th><th>faceOffWins</th><th>faceoffTaken</th><th>takeaways</th><th>giveaways</th><th>shortHandedGoals</th><th>shortHandedAssists</th><th>blocked</th><th>plusMinus</th><th>evenTimeOnIce</th><th>shortHandedTimeOnIce</th><th>powerPlayTimeOnIce</th></tr></thead><tbody><tr><td>2012030221</td><td>8471958</td><td>3</td><td>1925</td><td>0</td><td>0</td><td>0</td><td>3</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>5</td><td>0</td><td>1406</td><td>342</td><td>177</td></tr><tr><td>2012030221</td><td>8471339</td><td>3</td><td>1597</td><td>1</td><td>0</td><td>2</td><td>3</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>3</td><td>0</td><td>0</td><td>2</td><td>1</td><td>1099</td><td>315</td><td>183</td></tr><tr><td>2012030221</td><td>8471873</td><td>3</td><td>1695</td><td>0</td><td>0</td><td>1</td><td>2</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>2</td><td>0</td><td>1488</td><td>99</td><td>108</td></tr><tr><td>2012030221</td><td>8473432</td><td>3</td><td>957</td><td>0</td><td>0</td><td>3</td><td>5</td><td>0</td><td>0</td><td>2</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>957</td><td>0</td><td>0</td></tr><tr><td>2012030221</td><td>8470192</td><td>3</td><td>859</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>2</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>2</td><td>0</td><td>859</td><td>0</td><td>0</td></tr></tbody></table></div>"]}}],"execution_count":2},{"cell_type":"markdown","source":["## Write Data"],"metadata":{}},{"cell_type":"code","source":["# Save as CSV and parquet\n\n# DBFS\ndf.write.save('/FileStore/parquet/game__stats', format='parquet')\n\n# S3\n#df.write.parquet(\"s3a://my_bucket/game_skater_stats\", mode=\"overwrite\")\n\n# DBFS\ndf.write.save('/FileStore/parquet/game__stats.csv', format='csv')\n\n# S3\n#df.coalesce(1).write.format(\"com.databricks.spark.csv\")\n#   .option(\"header\", \"true\").save(\"s3a://my_bucket/game_skater_stats.csv\")\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":4},{"cell_type":"markdown","source":["## Transforming Data"],"metadata":{}},{"cell_type":"code","source":["df.createOrReplaceTempView(\"stats\")\n\ndisplay(spark.sql(\"\"\"\n  select player_id, sum(1) as games, sum(goals) as goals\n  from stats\n  group by 1\n  order by 3 desc\n  limit 5\n\"\"\"))"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>player_id</th><th>games</th><th>goals</th></tr></thead><tbody><tr><td>8471214</td><td>520</td><td>299</td></tr><tr><td>8471675</td><td>522</td><td>221</td></tr><tr><td>8474141</td><td>499</td><td>216</td></tr><tr><td>8470794</td><td>515</td><td>207</td></tr><tr><td>8475765</td><td>465</td><td>200</td></tr></tbody></table></div>"]}}],"execution_count":6},{"cell_type":"code","source":["# player names\nfile_location = \"/FileStore/tables/player_info.csv\"\nnames = spark.read.format(\"CSV\").option(\"inferSchema\", True).option(\"header\", True).load(file_location)\n#display(names)"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\"></div>"]}}],"execution_count":7},{"cell_type":"code","source":["df.createOrReplaceTempView(\"stats\")\n\ntop_players = spark.sql(\"\"\"\nselect player_id, sum(1) as games, sum(goals) as goals\nfrom stats\ngroup by 1\norder by 3 desc\nlimit 5\n\"\"\")\n\ntop_players.createOrReplaceTempView(\"top_players\")\nnames.createOrReplaceTempView(\"names\")\n\ndisplay(spark.sql(\"\"\"\nselect p.player_id, goals, firstName, lastName\nfrom top_players p\njoin names n\n  on p.player_id = n.player_id\norder by 2 desc  \n\"\"\"))\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>player_id</th><th>goals</th><th>firstName</th><th>lastName</th></tr></thead><tbody><tr><td>8471214</td><td>299</td><td>Alex</td><td>Ovechkin</td></tr><tr><td>8471675</td><td>221</td><td>Sidney</td><td>Crosby</td></tr><tr><td>8474141</td><td>216</td><td>Patrick</td><td>Kane</td></tr><tr><td>8470794</td><td>207</td><td>Joe</td><td>Pavelski</td></tr><tr><td>8475765</td><td>200</td><td>Vladimir</td><td>Tarasenko</td></tr></tbody></table></div>"]}}],"execution_count":8},{"cell_type":"code","source":["display(spark.sql(\"\"\"\nselect cast(substring(game_id, 1, 4) || '-' \n  || substring(game_id, 5, 2) || '-01' as Date) as month\n  , sum(goals)/count(distinct game_id) as goals_per_goal\nfrom stats\ngroup by 1\norder by 1\n\"\"\"))"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>month</th><th>goals_per_goal</th></tr></thead><tbody><tr><td>2012-02-01</td><td>5.3069444444444445</td></tr><tr><td>2012-03-01</td><td>5.023255813953488</td></tr><tr><td>2013-02-01</td><td>5.342276422764227</td></tr><tr><td>2013-03-01</td><td>5.591397849462366</td></tr><tr><td>2014-02-01</td><td>5.324390243902439</td></tr><tr><td>2014-03-01</td><td>5.033707865168539</td></tr><tr><td>2015-02-01</td><td>5.337398373983739</td></tr><tr><td>2015-03-01</td><td>5.252747252747253</td></tr><tr><td>2016-02-01</td><td>5.4504065040650405</td></tr><tr><td>2016-03-01</td><td>5.160919540229885</td></tr><tr><td>2017-02-01</td><td>5.8607395751376865</td></tr><tr><td>2017-03-01</td><td>5.904761904761905</td></tr></tbody></table></div>"]}}],"execution_count":9},{"cell_type":"code","source":["\ndisplay(spark.sql(\"\"\"\nselect cast(goals/shots * 50 as int)/50.0 as Goals_per_shot, sum(1) as Players \nfrom (\n  select player_id, sum(shots) as shots, sum(goals) as goals\n  from stats\n  group by 1\n  having goals >= 5\n)  \ngroup by 1\norder by 1\n\"\"\"))  \n  "],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>Goals_per_shot</th><th>Players</th></tr></thead><tbody><tr><td>0.0</td><td>1</td></tr><tr><td>0.02</td><td>83</td></tr><tr><td>0.04</td><td>157</td></tr><tr><td>0.06</td><td>154</td></tr><tr><td>0.08</td><td>169</td></tr><tr><td>0.1</td><td>171</td></tr><tr><td>0.12</td><td>117</td></tr><tr><td>0.14</td><td>37</td></tr><tr><td>0.16</td><td>13</td></tr><tr><td>0.18</td><td>4</td></tr><tr><td>0.2</td><td>1</td></tr><tr><td>0.22</td><td>2</td></tr><tr><td>0.32</td><td>1</td></tr></tbody></table></div>"]}}],"execution_count":10},{"cell_type":"markdown","source":["## MLlib: Linear Regression"],"metadata":{}},{"cell_type":"code","source":["from pyspark.ml.feature import VectorAssembler\nfrom pyspark.ml.regression import LinearRegression\n\nassembler = VectorAssembler(inputCols=['shots', 'hits', 'assists', 'penaltyMinutes', 'timeOnIce', 'takeaways'], outputCol=\"features\" )\ntrain_df = assembler.transform(df) \n\nlr = LinearRegression(featuresCol = 'features', labelCol='goals')\nlr_model = lr.fit(train_df)\n\ntrainingSummary = lr_model.summary\nprint(\"Coefficients: \" + str(lr_model.coefficients))\nprint(\"RMSE: %f\" % trainingSummary.rootMeanSquaredError)\nprint(\"R2: %f\" % trainingSummary.r2)"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">Coefficients: [0.092664303446,-0.00633910298663,0.00602854937487,-0.000485772787063,-4.61822622641e-05,0.0176748286452]\nRMSE: 0.375613\nR2: 0.124695\n</div>"]}}],"execution_count":12},{"cell_type":"markdown","source":["## Pandas UDFs"],"metadata":{}},{"cell_type":"code","source":["# creating a linear fit for a single player\n\ndf.createOrReplaceTempView(\"stats\")\n\nsample_pd = spark.sql(\"\"\"\nselect * from stats\nwhere player_id = 8471214\n\"\"\").toPandas()\n\nfrom scipy.optimize import leastsq\nimport numpy as np\n\ndef fit(params, x, y):\n    return (y - (params[0] + x * params[1] ))  \n\nresult = leastsq(fit, [1, 0], args=(sample_pd.shots, sample_pd.hits))\nprint(result)\n"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .ansiout {\n    display: block;\n    unicode-bidi: embed;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n    word-break: break-all;\n    font-family: \"Source Code Pro\", \"Menlo\", monospace;;\n    font-size: 13px;\n    color: #555;\n    margin-left: 4px;\n    line-height: 19px;\n  }\n</style>\n<div class=\"ansiout\">(array([ 2.87826126, -0.01760805]), 1)\n</div>"]}}],"execution_count":14},{"cell_type":"code","source":["from pyspark.sql.functions import pandas_udf, PandasUDFType\nfrom pyspark.sql.types import *\nimport pandas as pd\n\nschema = StructType([StructField('ID', LongType(), True),\n                     StructField('p0', DoubleType(), True),\n                     StructField('p1', DoubleType(), True)])  \n\n  \n@pandas_udf(schema, PandasUDFType.GROUPED_MAP)\ndef analyze_player(sample_pd):\n  \n    if (len(sample_pd.shots) <= 1):\n        return pd.DataFrame({'ID': [sample_pd.player_id[0]], 'p0': [ 0 ], 'p1': [ 0 ]})\n    \n    result = leastsq(fit, [1, 0], args=(sample_pd.shots, sample_pd.hits))\n    return pd.DataFrame({'ID': [sample_pd.player_id[0]], 'p0': [result[0][0]], 'p1': [result[0][1]]})\n\nplayer_df = df.groupby('player_id').apply(analyze_player)\ndisplay(player_df.take(5))"],"metadata":{},"outputs":[{"metadata":{},"output_type":"display_data","data":{"text/html":["<style scoped>\n  .table-result-container {\n    max-height: 300px;\n    overflow: auto;\n  }\n  table, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n  }\n  th, td {\n    padding: 5px;\n  }\n  th {\n    text-align: left;\n  }\n</style><div class='table-result-container'><table class='table-result'><thead style='background-color: white'><tr><th>ID</th><th>p0</th><th>p1</th></tr></thead><tbody><tr><td>8470085</td><td>2.344963791971333</td><td>-0.15734035549738007</td></tr><tr><td>8471859</td><td>0.6199999999991705</td><td>-0.036190476190554856</td></tr><tr><td>8475765</td><td>0.6632097778743309</td><td>-0.0035926360505775527</td></tr><tr><td>8476426</td><td>-2.1813661987835076E-12</td><td>1.6666666666703023</td></tr><tr><td>8476439</td><td>2.185808176453509</td><td>0.08120753035553108</td></tr></tbody></table></div>"]}}],"execution_count":15}],"metadata":{"name":"PySpark_NHL","notebookId":2759719563353366},"nbformat":4,"nbformat_minor":0}
